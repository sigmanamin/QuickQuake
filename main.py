import asyncio
import requests
from datetime import datetime
import pytz
from linebot.v3 import WebhookHandler
from linebot.v3.messaging import (
    Configuration, 
    ApiClient, 
    MessagingApi,
    TextMessage, 
    BroadcastRequest,
    PushMessageRequest
)
from linebot.v3.exceptions import InvalidSignatureError
import logging

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ log
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE
LINE_CHANNEL_ACCESS_TOKEN = ''
configuration = Configuration(access_token=LINE_CHANNEL_ACCESS_TOKEN)

# ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÑ‡∏ó‡∏¢
LAT_MIN, LAT_MAX = 5, 22
LON_MIN, LON_MAX = 92, 108
MIN_MAGNITUDE = 2.5
CHECK_INTERVAL = 60  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
MESSAGE_DELAY = 5    # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

# ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
latest_quake_time = 0

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß
def fetch_earthquake_data():
    url = "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_day.geojson"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        logging.error(f"‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return None

# ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÑ‡∏ó‡∏¢‡∏°‡∏±‡πâ‡∏¢
def is_near_thailand(lat, lon):
    return LAT_MIN <= lat <= LAT_MAX and LON_MIN <= lon <= LON_MAX

# ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE
async def send_line_notification(message_text, user_id=None):
    if not message_text:
        return False

    max_retries = 5
    retry_delay = 5  # ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏£‡∏Å

    for attempt in range(max_retries):
        try:
            with ApiClient(configuration) as api_client:
                line_bot_api = MessagingApi(api_client)
                text_message = TextMessage(text=message_text)
                
                if user_id is None:  # ‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö broadcast
                    broadcast_request = BroadcastRequest(messages=[text_message])
                    response = line_bot_api.broadcast(broadcast_request)
                    logging.info(f"‡∏™‡πà‡∏á broadcast: {message_text[:50]}...")
                # ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö push ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
                # else:
                #     push_request = PushMessageRequest(to=user_id, messages=[text_message])
                #     response = line_bot_api.push_message(push_request)
                #     logging.info(f"‡∏™‡πà‡∏á push ‡πÑ‡∏õ {user_id}: {message_text[:50]}...")
                
                return True
        except Exception as e:
            if hasattr(e, 'status_code') and e.status_code == 429:
                if attempt < max_retries - 1:
                    wait_time = retry_delay * (2 ** attempt)  # ‡∏£‡∏≠‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ
                    logging.warning(f"‡πÄ‡∏Å‡∏¥‡∏ô‡∏•‡∏¥‡∏°‡∏¥‡∏ï (429) ‡∏£‡∏≠ {wait_time} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
                    await asyncio.sleep(wait_time)
                else:
                    logging.error(f"‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö {max_retries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
                    return False
            else:
                logging.error(f"‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: {e}")
                return False

# ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
async def check_earthquakes():
    global latest_quake_time
    
    data = fetch_earthquake_data()
    if not data or "features" not in data:
        return

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤
    sorted_quakes = sorted(
        data["features"],
        key=lambda x: x["properties"]["time"],
        reverse=True
    )

    # ‡∏´‡∏≤‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÑ‡∏ó‡∏¢
    for quake in sorted_quakes:
        props = quake["properties"]
        coords = quake["geometry"]["coordinates"]
        lon, lat, depth = coords
        magnitude = props.get("mag")
        
        if not magnitude or magnitude < MIN_MAGNITUDE:
            continue
            
        if not is_near_thailand(lat, lon):
            continue

        # ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ latest_quake_time ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        place = props.get("place", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà")
        thai_time = datetime.fromtimestamp(props["time"] / 1000, tz=pytz.UTC).astimezone(pytz.timezone('Asia/Bangkok'))

        severity = (
            "‚õîÔ∏è ‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏°‡∏≤‡∏Å" if magnitude >= 6.0 
            else "‚ö†Ô∏è ‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á" if magnitude >= 4.0 
            else "‚ÑπÔ∏è ‡πÄ‡∏ö‡∏≤"
        )

        alert = (
            f"üåã ‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏ó‡∏î‡∏™‡∏≠‡∏ö API)!\n"
            f"{severity}\n"
            f"‡∏Ç‡∏ô‡∏≤‡∏î: {magnitude:.1f} ‡∏£‡∏¥‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå\n"
            f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {place}\n"
            f"‡∏û‡∏¥‡∏Å‡∏±‡∏î: ({lat:.2f}, {lon:.2f})\n"
            f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å: {depth:.1f} ‡∏Å‡∏°.\n"
            f"‡πÄ‡∏ß‡∏•‡∏≤: {thai_time.strftime('%Y-%m-%d %H:%M:%S')} (‡πÑ‡∏ó‡∏¢)\n"
            f"‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà: https://www.google.com/maps?q={lat},{lon}"
        )

        if await send_line_notification(alert):
            latest_quake_time = props["time"]  # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á
            logging.info(f"‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: M{magnitude} ‡∏ó‡∏µ‡πà {place}")
            await asyncio.sleep(MESSAGE_DELAY)  # ‡∏£‡∏≠‡∏´‡∏ô‡πà‡∏≠‡∏¢
        break

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö
async def main():
    global latest_quake_time
    
    logging.info("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß...")
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    data = fetch_earthquake_data()
    if data and "features" in data:
        sorted_quakes = sorted(
            data["features"],
            key=lambda x: x["properties"]["time"],
            reverse=True
        )
        for quake in sorted_quakes:
            coords = quake["geometry"]["coordinates"]
            lon, lat, _ = coords
            if is_near_thailand(lat, lon):
                latest_quake_time = quake["properties"]["time"]
                break

    startup_message = (
        "üöÄ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß!\n"
        f"‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà {MIN_MAGNITUDE} ‡∏£‡∏¥‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå\n"
        "‡πÉ‡∏ô‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á\n"
        f"‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å {CHECK_INTERVAL} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
    )
    
    if not await send_line_notification(startup_message):
        logging.error("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        return

    # ‡∏•‡∏π‡∏õ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ï‡∏•‡∏≠‡∏î
    try:
        while True:
            await check_earthquakes()
            await asyncio.sleep(CHECK_INTERVAL)
    except Exception as e:
        logging.error(f"‡∏•‡∏π‡∏õ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: {e}")
        await send_line_notification("‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")

# ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö")
        asyncio.run(send_line_notification("üî¥ ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß"))
    except Exception as e:
        logging.error(f"‡πÄ‡∏à‡∏≠‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}")
        asyncio.run(send_line_notification("‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"))
